prometheus:
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: tap-ingress-selfsigned
    hosts:
    - "prometheus.lab.pcfdemo.net"                         ## TODO update this
    tls:
    - secretName: grafana-cert
      hosts:
      - "prometheus.lab.pcfdemo.net"                       ## TODO update this
  prometheusSpec:
    scrapeInterval: 5s                                     ## TODO update this

grafana:
  adminPassword: "changeme"                                ## TODO update this
  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: tap-ingress-selfsigned
    hosts:
    - "grafana.lab.pcfdemo.net"                            ## TODO update this
    tls:
    - secretName: grafana-cert
      hosts:
      - "grafana.lab.pcfdemo.net"                          ## TODO update this
kube-state-metrics:
  rbac:
    extraRules:
    - apiGroups: ["carto.run"]
      resources: ["deliverables","workloads"]
      verbs: ["list", "watch"]
    - apiGroups: ["source.toolkit.fluxcd.io"]
      resources: ["gitrepositories"]
      verbs: ["list", "watch"]
    - apiGroups: ["tekton.dev"]
      resources: ["taskruns","pipelineruns"]
      verbs: ["list", "watch"]
    - apiGroups: ["app-scanning.apps.tanzu.vmware.com"]
      resources: ["imagevulnerabilityscans"]
      verbs: ["list", "watch"]
    - apiGroups: ["scanning.apps.tanzu.vmware.com"]
      resources: ["imagescans","sourcescans"]
      verbs: ["list", "watch"]
    - apiGroups: ["kpack.io"]
      resources: ["images","builds"]
      verbs: ["list", "watch"]
    - apiGroups: ["packaging.carvel.dev"]
      resources: ["packagerepositories","packageinstalls"]
      verbs: ["list", "watch"]
    - apiGroups: ["kappctrl.k14s.io"]
      resources: ["apps"]
      verbs: ["list", "watch"]
    - apiGroups: ["serving.knative.dev"]
      resources: ["services","revisions"]
      verbs: ["list", "watch"]
    - apiGroups: ["servicebinding.io"]
      resources: ["servicebindings"]
      verbs: ["list", "watch"]
    - apiGroups: ["services.apps.tanzu.vmware.com"]
      resources: ["clusterinstanceclasses","classclaims","resourceclaims"]
      verbs: ["list", "watch"]
    - apiGroups: ["apis.apps.tanzu.vmware.com"]
      resources: ["apidescriptors"]
      verbs: ["list", "watch"]
    - apiGroups: ["accelerator.apps.tanzu.vmware.com"]
      resources: ["accelerators","fragments"]
      verbs: ["list", "watch"]
  customResourceState:
    enabled: true
    config:
      spec:
        resources:
          - groupVersionKind:
              group: accelerator.apps.tanzu.vmware.com
              version: "v1alpha1"
              kind: Fragment
            labelsFromPath:
              name: [metadata, name]
              namespace: [metadata, namespace]
            metricNamePrefix: ""
            metrics:
              - name: accelerator_fragment_info
                help: App Accelerators Fragment info from status and spec
                each:
                  type: Info
                  info:
                    labelsFromPath:
                      created_at: [metadata, creationTimestamp]
                      source_bundle: [spec, source, image]
                      source_bundle_secret: [spec, source, imagePullSecrets, "0", name]
                      source_git_url: [spec, git, url]
                      source_git_branch: [spec, git, ref, branch]
                      source_git_tag: [spec, git, ref, tag]
                      source_git_commit: [spec, git, ref, commit]
                      source_git_secret: [spec, git, secretRef, name]
                      source_git_sub_path: [spec, git, subPath]
                      source_git_semver: [spec, git, ref, semver]
                      ready: [status, artifact, ready]
                      status_message: [status, artifact, message]
              - name: accelerator_fragment_status
                help: App Accelerator Fragment status from conditions
                each:
                  type: Gauge
                  gauge:
                    path: [status, conditions]
                    labelsFromPath:
                      type: ["type"]
                      status: ["status"]
                      reason: ["reason"]
                      message: ["message"]
                      last_transition_ime: ["lastTransitionTime"]
                    valueFrom: ["status"]
          - groupVersionKind:
              group: accelerator.apps.tanzu.vmware.com
              version: "v1alpha1"
              kind: Accelerator
            labelsFromPath:
              name: [metadata, name]
              namespace: [metadata, namespace]
            metricNamePrefix: ""
            metrics:
              - name: accelerator_info
                help: App Accelerators info from status and spec
                each:
                  type: Info
                  info:
                    labelsFromPath:
                      created_at: [metadata, creationTimestamp]
                      source_bundle: [spec, source, image]
                      source_bundle_secret: [spec, source, imagePullSecrets, "0", name]
                      displayName: [status, displayName]
                      source_git_url: [spec, git, url]
                      source_git_branch: [spec, git, ref, branch]
                      source_git_tag: [spec, git, ref, tag]
                      source_git_commit: [spec, git, ref, commit]
                      source_git_secret: [spec, git, secretRef, name]
                      source_git_sub_path: [spec, git, subPath]
                      source_git_semver: [spec, git, ref, semver]
                      ready: [status, artifact, ready]
                      status_message: [status, artifact, message]
              - name: accelerator_imports_info
                help: App Accelerators info from status and spec
                each:
                  type: Info
                  info:
                    labelsFromPath:  
                      "*": [status, artifact, imports]
              - name: accelerator_status
                help: App Accelerator status from conditions
                each:
                  type: Gauge
                  gauge:
                    path: [status, conditions]
                    labelsFromPath:
                      type: ["type"]
                      status: ["status"]
                      reason: ["reason"]
                      message: ["message"]
                      last_transition_ime: ["lastTransitionTime"]
                    valueFrom: ["status"]
          - groupVersionKind:
              group: apis.apps.tanzu.vmware.com
              version: "v1alpha1"
              kind: APIDescriptor
            labelsFromPath:
              name: [metadata, name]
              namespace: [metadata, namespace]
              workload: [metadata, labels, carto.run/workload-name]
            metricNamePrefix: ""
            metrics:
              - name: api_descriptor_info
                help: API Descriptor info from status and spec
                each:
                  type: Info
                  info:
                    labelsFromPath:
                      created_at: [metadata, creationTimestamp]
                      type: [spec, type]
                      system: [spec, system]
                      owner: [spec, owner]
                      base_url_ref_kind: [spec, location, baseURL, ref, kind]
                      base_url_ref_name: [spec, location, baseURL, ref, name]
                      base_url_ref_namespace: [spec, location, baseURL, ref, namespace]
                      base_url_ref_api_version: [spec, location, baseURL, ref, apiVersion]
                      base_url_ref_jsonPath: [spec, location, baseURL, ref, jsonPath]
                      path: [spec, location, path]
                      resolved_api_url: [status, resolvedAPISpecURL]
                      base_url: [spec, location, baseURL, url]
                      tap_gui_entity_url: [status, registeredEntityURL]
                      tap_gui_entity_id: [status, registeredTapUID]
              - name: api_descriptor_status
                help: API Descriptor status from conditions
                each:
                  type: Gauge
                  gauge:
                    path: [status, conditions]
                    labelsFromPath:
                      type: ["type"]
                      status: ["status"]
                      reason: ["reason"]
                      message: ["message"]
                      last_transition_ime: ["lastTransitionTime"]
                    valueFrom: ["status"]
          - groupVersionKind:
              group: serving.knative.dev
              version: "v1"
              kind: Revision
            labelsFromPath:
              name: [metadata, name]
              namespace: [metadata, namespace]
              workload: [metadata, labels, carto.run/workload-name]
              knative_service: [metadata, labels, serving.knative.dev/service]
            metricNamePrefix: knative
            metrics:
              - name: revision_info
                help: Knative Revision info from status and spec
                each:
                  type: Info
                  info:
                    labelsFromPath:
                      created_at: [metadata, creationTimestamp]
                      workload_image: [spec, containers, "0", image]
                      service_account: [spec, serviceAccountName]
                      timeout_seconds: [spec, timeoutSeconds]
                      container_port: [spec, containers, "0", ports, "0", containerPort]
                      run_as_user: [spec, containers, "0", securityContext, runAsUser]
                      actual_replicas: [status, actualReplicas]
                      desired_replicas: [status, desiredReplicas]
                      routing_state: [metadata, labels, serving.knative.dev/routingState]
                      knative_configuration: [metadata, labels, serving.knative.dev/configuration]
              - name: revision_status
                help: Knative Revision status from conditions
                each:
                  type: Info
                  info:
                    path: [status, conditions]
                    labelsFromPath:
                      type: ["type"]
                      status: ["status"] #Unknown
                      reason: ["reason"]
                      message: ["message"]
                      last_transition_ime: ["lastTransitionTime"]
                    valueFrom: ["status"]
          - groupVersionKind:
              group: serving.knative.dev
              version: "v1"
              kind: Service
            labelsFromPath:
              name: [metadata, name]
              namespace: [metadata, namespace]
              workload: [metadata, labels, carto.run/workload-name]
            metricNamePrefix: knative
            metrics:
              - name: service_info
                help: Knative Service info from status and spec
                each:
                  type: Info
                  info:
                    labelsFromPath:
                      created_at: [metadata, creationTimestamp]
                      workload_image: [spec, template, spec, containers, "0", image]
                      service_account: [spec, template, spec, serviceAccountName]
                      timeout_seconds: [spec, template, spec, timeoutSeconds]
                      container_port: [spec, template, spec, containers, "0", ports, "0", containerPort]
                      run_as_user: [spec, template, spec, containers, "0", securityContext, runAsUser]
                      internal_url: [status, address, url]
                      latest_ready_revision: [status, latestReadyRevisionName]
                      latest_created_revision: [status, latestCreatedRevisionName]
                      external_url: [status, url]
              - name: service_status
                help: Knative Service status from conditions
                each:
                  type: Info
                  info:
                    path: [status, conditions]
                    labelsFromPath:
                      type: ["type"]
                      status: ["status"] #Unknown
                      reason: ["reason"]
                      message: ["message"]
                      last_transition_Time: ["lastTransitionTime"]
                    valueFrom: ["status"]
          - groupVersionKind:
              group: servicebinding.io
              version: "v1beta1"
              kind: ServiceBinding
            labelsFromPath:
              name: [metadata, name]
              namespace: [metadata, namespace]
              workload: [metadata, labels, carto.run/workload-name]
            metricNamePrefix: ""
            metrics:
              - name: service_binding_info
                help: Service Binding info from status and spec
                each:
                  type: Info
                  info:
                    labelsFromPath:
                      created_at: [metadata, creationTimestamp]
                      binding_name: [spec, name]
                      service_kind: [spec, service, kind]
                      service_api_version: [spec, service, apiVersion]
                      service_name: [spec, service, name]
                      workload_name: [spec, workload, name]
                      workload_kind: [spec, workload, kind]
                      workload_api_version: [spec, workload, apiVersion]
                      binding_secret: [status, binding, name]
              - name: service_binding_status
                help: Service Binding status from conditions
                each:
                  type: Gauge
                  gauge:
                    path: [status, conditions]
                    labelsFromPath:
                      type: ["type"]
                      status: ["status"]
                      reason: ["reason"]
                      message: ["message"]
                      last_transition_ime: ["lastTransitionTime"]
                    valueFrom: ["status"]
          - groupVersionKind:
              group: services.apps.tanzu.vmware.com
              version: "v1alpha1"
              kind: ClusterInstanceClass
            labelsFromPath:
              name: [metadata, name]
              namespace: [metadata, namespace]
              xrd: [spec, provisioner, crossplane, compositeResourceDefinition]
              instance_type_kind: [status, instanceType, kind]
              instance_type_api_group: [status, instanceType, group]
              instance_type_api_version: [status, instanceType, version]
            metricNamePrefix: stk
            metrics:
              - name: cluster_instance_class_composition_selector
                help: Cluster Instance Class composition label selectors
                each:
                  type: Info
                  info:
                    labelsFromPath:
                      "*": [spec, provisioner, crossplane, compositionSelector, matchLabels] 
              - name: cluster_instance_class_status
                help: Cluster Instance Class status from conditions
                each:
                  type: Gauge
                  gauge:
                    path: [status, conditions]
                    labelsFromPath:
                      type: ["type"]
                      status: ["status"]
                      reason: ["reason"]
                      message: ["message"]
                      last_transition_ime: ["lastTransitionTime"]
                    valueFrom: ["status"]
          - groupVersionKind:
              group: services.apps.tanzu.vmware.com
              version: "v1alpha1"
              kind: ResourceClaim
            labelsFromPath:
              name: [metadata, name]
              namespace: [metadata, namespace]
            metricNamePrefix: stk
            metrics:
              - name: resource_claim_info
                help: Resource Claim info from status and spec
                each:
                  type: Info
                  info:
                    labelsFromPath:
                      created_at: [metadata, creationTimestamp]
                      class_claim: [metadata, ownerReferences, "0", name]
                      binding_secret: [status, binding, name]
                      claimed_resource_name: [status, claimedResourceRef, name]
                      claimed_resource_kind: [status, claimedResourceRef, kind]
              - name: resource_claim_status
                help: Resource Claim status from conditions
                each:
                  type: Gauge
                  gauge:
                    path: [status, conditions]
                    labelsFromPath:
                      type: ["type"]
                      status: ["status"]
                      reason: ["reason"]
                      message: ["message"]
                      last_transition_ime: ["lastTransitionTime"]
                    valueFrom: ["status"]
          - groupVersionKind:
              group: services.apps.tanzu.vmware.com
              version: "v1alpha1"
              kind: ClassClaim
            labelsFromPath:
              name: [metadata, name]
              namespace: [metadata, namespace]
            metricNamePrefix: stk
            metrics:
              - name: class_claim_info
                help: Class Claim info from status and spec
                each:
                  type: Info
                  info:
                    labelsFromPath:
                      created_at: [metadata, creationTimestamp]
                      xrd: [metadata, annotations, classclaims.services.apps.tanzu.vmware.com/xrd-name]
                      class: [spec, classRef, name]
                      binding_secret: [status, binding, name]
                      provisioned_resource_name: [status,provisionedResourceRef, name]
                      provisioned_resource_kind: [status,provisionedResourceRef, kind]
              - name: class_claim_status
                help: Class Claim status from conditions
                each:
                  type: Gauge
                  gauge:
                    path: [status, conditions]
                    labelsFromPath:
                      type: ["type"]
                      status: ["status"]
                      reason: ["reason"]
                      message: ["message"]
                      last_transition_ime: ["lastTransitionTime"]
                    valueFrom: ["status"]
          - groupVersionKind:
              group: carto.run
              version: "v1alpha1"
              kind: Deliverable
            labelsFromPath:
              name: [metadata, name]
              namespace: [metadata, namespace]
              type: [metadata, labels, apps.tanzu.vmware.com/workload-type]
              has_tests: [metadata, labels, apps.tanzu.vmware.com/has-tests]
            metricNamePrefix: cartographer
            metrics:
              - name: deliverable_info
                help: Deliverable info from status and spec
                each:
                  type: Info
                  info:
                    labelsFromPath:
                      created_at: [metadata, creationTimestamp]
                      auto_configure_actuators: [metadata, labels, apps.tanzu.vmware.com/auto-configure-actuators]
                      source_image: [spec, source, image]
                      source_git_url: [spec, source, git, url]
                      source_git_branch: [spec, source, git, ref, branch]
                      source_git_commit: [spec, source, git, ref, commit]
                      source_git_tag: [spec, source, git, ref, tag]
                      source_sub_path: [spec, source, subPath]
                      delivery: [status, deliveryRef, name]
              - name: deliverable_status
                help: Deliverable status from conditions
                each:
                  type: Info
                  info:
                    path: [status, conditions]
                    labelsFromPath:
                      type: ["type"]
                      status: ["status"] #Unknown
                      reason: ["reason"]
                      message: ["message"]
                      last_transition_ime: ["lastTransitionTime"]
                    valueFrom: ["status"]
          - groupVersionKind:
              group: carto.run
              version: "v1alpha1"
              kind: Workload
            labelsFromPath:
              name: [metadata, name]
              namespace: [metadata, namespace]
              type: [metadata, labels, apps.tanzu.vmware.com/workload-type]
              has_tests: [metadata, labels, apps.tanzu.vmware.com/has-tests]
            metricNamePrefix: cartographer
            metrics:
              - name: workload_info
                help: Workload info from status and spec
                each:
                  type: Info
                  info:
                    labelsFromPath:
                      created_at: [metadata, creationTimestamp]
                      auto_configure_actuators: [metadata, labels, apps.tanzu.vmware.com/auto-configure-actuators]
                      source_image: [spec, source, image]
                      source_git_url: [spec, source, git, url]
                      source_git_branch: [spec, source, git, ref, branch]
                      source_git_commit: [spec, source, git, ref, commit]
                      source_git_tag: [spec, source, git, ref, tag]
                      source_sub_path: [spec, source, subPath]
                      supply_chain: [status, supplyChainRef, name]
                      debug_enabled: [spec, params, "[name=debug]", value]
                      live_update_enabled: [spec, params, "[name=live-update]", value]
              - name: workload_status
                help: Workload status from conditions
                each:
                  # type: Gauge
                  # gauge:
                  #   path: [status, conditions]
                  #   labelsFromPath:
                  #     type: ["type"] 
                  #     status: ["status"] # Unknown 
                  #     reason: ["reason"]
                  #     message: ["message"]
                  #     last_transition_ime: ["lastTransitionTime"]
                  #   valueFrom: ["status"]

                  type: Info
                  info:
                    path: [status, conditions]
                    labelsFromPath:
                      type: ["type"]
                      status: [ status ]                      
                      reason: ["reason"]
                      message: ["message"]
                      last_transition_Time: ["lastTransitionTime"]
                    valueFrom: ["status"]
          - groupVersionKind:
              group: source.toolkit.fluxcd.io
              version: "v1beta2"
              kind: GitRepository
            labelsFromPath:
              name: [metadata, name]
              namespace: [metadata, namespace]
              component: [metadata, labels, app.kubernetes.io/component]
              owner: [metadata, ownerReferences, "0", name]
              owner_type: [metadata, ownerReferences, "0", kind]
              workload: [metadata, labels, carto.run/workload-name]
            metricNamePrefix: flux
            metrics:
              - name: git_repository_info
                help: Flux Git Repository info from status and spec
                each:
                  type: Info
                  info:
                    labelsFromPath:
                      sync_interval: [spec, interval]
                      branch: [spec, ref, branch]
                      git_secret: [spec, secretRef, name]
                      git_url: [spec, url]
                      internal_url: [status, artifact, url]
                      last_updated: [status, artifact, lastUpdateTime]
                      revision: [status, artifact, revision]
                      status: [status, conditions, "[type=Succeeded]", reason]
              - name: git_repository_status
                help: Git Repository status from conditions
                each:
                  type: Gauge
                  gauge:
                    path: [status, conditions]
                    labelsFromPath:
                      type: ["type"]
                      status: ["status"]
                      reason: ["reason"]
                      message: ["message"]
                      last_transition_ime: ["lastTransitionTime"]
                    valueFrom: ["status"]
          - groupVersionKind:
              group: tekton.dev
              version: "v1beta1"
              kind: TaskRun
            labelsFromPath:
              name: [metadata, name]
              namespace: [metadata, namespace]
              component: [metadata, labels, app.kubernetes.io/component]
              owner: [metadata, ownerReferences, "0", name]
              owner_type: [metadata, ownerReferences, "0", kind]
              workload: [metadata, labels, carto.run/workload-name]
              task: [spec, taskRef, name]
            metricNamePrefix: tekton
            metrics:
              - name: task_run_info
                help: Tekton Task Run info from status and spec
                each:
                  type: Info
                  info:
                    labelsFromPath:
                      task_type: [spec, taskRef, kind]
                      completion_time: [status, completionTime]
                      start_time: [status, startTime]
                      carto_resource: [metadata, labels, carto.run/resource-name]
                      supply_chain: [metadata, labels, carto.run/supply-chain-name]
                      pod_name: [status, podName]
              - name: task_run_status
                help: Task Run status from conditions
                each:
                  type: Info
                  info:
                    path: [status, conditions]
                    labelsFromPath:
                      type: ["type"]
                      status: ["status"] #Unknown
                      reason: ["reason"]
                      message: ["message"]
                    valueFrom: ["status"]
          - groupVersionKind:
              group: scanning.apps.tanzu.vmware.com
              version: "v1beta1"
              kind: SourceScan
            labelsFromPath:
              name: [metadata, name]
              namespace: [metadata, namespace]
              scan_template: [spec, scanTemplate]
              scan_policy: [spec, scanPolicy]
              source_url: [spec, blob, url]
              source_revision: [spec, blob, revision]
              component: [metadata, labels, app.kubernetes.io/component]
              owner: [metadata, ownerReferences, "0", name]
              owner_type: [metadata, ownerReferences, "0", kind]
              workload: [metadata, labels, carto.run/workload-name]
              carto_resource: [metadata, labels, carto.run/resource-name]
              supply_chain: [metadata, labels, carto.run/supply-chain-name]
              scanner_name: [status, scannedBy, scanner, name]
              scanner_version: [status, scannedBy, scanner, version]
            metricNamePrefix: scst
            metrics:
              - name: source_scan_info
                help: Source scan information
                each:
                  type: Info
                  info:
                    labelsFromPath:
                      store_url: [status, metadataUrl]
                      phase: [status, phase]
                      critical_cve_count: [status, cveCount, critical]
                      high_cve_count: [status, cveCount, high]
                      low_cve_count: [status, cveCount, low]
                      medium_cve_count: [status, cveCount, medium]
                      total_cve_count: [status, cveCount, total]
                      unkown_cve_count: [status, cveCount, unknown]
              - name: source_scan_status
                help: Source Scan status from conditions
                each:
                  type: Gauge
                  gauge:
                    path: [status, conditions]
                    labelsFromPath:
                      type: ["type"]
                      status: ["status"]
                      reason: ["reason"]
                      message: ["message"]
                    valueFrom: ["status"]
          - groupVersionKind:
              group: scanning.apps.tanzu.vmware.com
              version: "v1beta1"
              kind: ImageScan
            labelsFromPath:
              name: [metadata, name]
              namespace: [metadata, namespace]
              scan_template: [spec, scanTemplate]
              scan_policy: [spec, scanPolicy]
              image: [spec, registry, image]
              component: [metadata, labels, app.kubernetes.io/component]
              owner: [metadata, ownerReferences, "0", name]
              owner_type: [metadata, ownerReferences, "0", kind]
              workload: [metadata, labels, carto.run/workload-name]
              carto_resource: [metadata, labels, carto.run/resource-name]
              supply_chain: [metadata, labels, carto.run/supply-chain-name]
              scanner_name: [status, scannedBy, scanner, name]
              scanner_version: [status, scannedBy, scanner, version]
            metricNamePrefix: scst
            metrics:
              - name: image_scan_info
                help: Image scan information
                each:
                  type: Info
                  info:
                    labelsFromPath:
                      store_url: [status, metadataUrl]
                      phase: [status, phase]
                      critical_cve_count: [status, cveCount, critical]
                      high_cve_count: [status, cveCount, high]
                      low_cve_count: [status, cveCount, low]
                      medium_cve_count: [status, cveCount, medium]
                      total_cve_count: [status, cveCount, total]
                      unkown_cve_count: [status, cveCount, unknown]
              - name: image_scan_status
                help: Image Scan status from conditions
                each:
                  type: Gauge
                  gauge:
                    path: [status, conditions]
                    labelsFromPath:
                      type: ["type"]
                      status: ["status"]
                      reason: ["reason"]
                      message: ["message"]
                    valueFrom: ["status"]
          - groupVersionKind:
              group: app-scanning.apps.tanzu.vmware.com
              version: "v1alpha1"
              kind: ImageVulnerabilityScan
            labelsFromPath:
              name: [metadata, name]
              namespace: [metadata, namespace]
              image: [spec, registry, image]
              component: [metadata, labels, app.kubernetes.io/component]
              owner: [metadata, ownerReferences, "0", name]
              owner_type: [metadata, ownerReferences, "0", kind]
              workload: [metadata, labels, carto.run/workload-name]
              carto_resource: [metadata, labels, carto.run/resource-name]
              supply_chain: [metadata, labels, carto.run/supply-chain-name]
              scanner_name: [status, scannedBy, scanner, name]
              scanner_version: [status, scannedBy, scanner, version]
            metricNamePrefix: scst
            metrics:
              - name: image_vulnerability_scan_status
                help: Image vulnerability Scan status from conditions
                each:
                  type: Info
                  info:
                    path: [status, conditions]
                    labelsFromPath:
                      type: ["type"]
                      status: ["status"]  #Unknown
                      reason: ["reason"]
                      message: ["message"]
                    valueFrom: ["status"]
          - groupVersionKind:
              group: tekton.dev
              version: "v1beta1"
              kind: PipelineRun
            labelsFromPath:
              name: [metadata, name]
              namespace: [metadata, namespace]
              component: [metadata, labels, app.kubernetes.io/component]
              owner: [metadata, ownerReferences, "0", name]
              owner_type: [metadata, ownerReferences, "0", kind]
              workload: [metadata, labels, carto.run/workload-name]
            metricNamePrefix: tekton
            metrics:
              - name: pipeline_run_info
                help: Tekton Pipeline Run info from status and spec
                each:
                  type: Info
                  info:
                    labelsFromPath:
                      pipeline: [spec, pipelineRef, name]
                      carto_resource: [metadata, labels, carto.run/resource-name]
                      supply_chain: [metadata, labels, carto.run/supply-chain-name]
                      completion_time: [status, completionTime]
                      start_time: [status, startTime]
              - name: pipeline_run_status
                help: Pipeline Run status from conditions
                each:
                  type: Info
                  info:
                    path: [status, conditions]
                    labelsFromPath:
                      type: ["type"]
                      status: ["status"] #Unknown
                      reason: ["reason"]
                      message: ["message"]
                    valueFrom: ["status"]
          - groupVersionKind:
              group: kpack.io
              version: "v1alpha2"
              kind: Build
            labelsFromPath:
              name: [metadata, name]
              namespace: [metadata, namespace]
              component: [metadata, labels, app.kubernetes.io/component]
              owner: [metadata, ownerReferences, "0", name]
              owner_type: [metadata, ownerReferences, "0", kind]
              workload: [metadata, labels, carto.run/workload-name]
            metricNamePrefix: kpack
            metrics:
              - name: build_info
                help: Build info from status and spec
                each:
                  type: Info
                  info:
                    labelsFromPath:
                      owner_image: [metadata, labels, image.kpack.io/image]
                      build_number: [metadata, labels, image.kpack.io/buildNumber]
                      builder: [spec, builder, image]
              - name: build_involved_buildpacks
                help: Buildpacks involved in a build
                each:
                  type: Info
                  info:
                    path: [status, buildMetadata]
                    labelsFromPath:
                      version: ["version"]
                      id: ["id"]
              - name: build_status
                help: Image status from conditions
                each:
                  type: Info
                  info:
                    path: [status, conditions]
                    labelsFromPath:
                      type: ["type"]
                      status: ["status"] #Unknown
                      reason: ["reason"]
                      last_transition_ime: ["lastTransitionTime"]
                    valueFrom: ["status"]
          - groupVersionKind:
              group: kpack.io
              version: "v1alpha2"
              kind: Image
            labelsFromPath:
              name: [metadata, name]
              namespace: [metadata, namespace]
              component: [metadata, labels, app.kubernetes.io/component]
              owner: [metadata, ownerReferences, "0", name]
              owner_type: [metadata, ownerReferences, "0", kind]
              workload: [metadata, labels, carto.run/workload-name]
            metricNamePrefix: kpack
            metrics:
              - name: image_info
                help: Image info from status and spec
                each:
                  type: Info
                  info:
                    labelsFromPath:
                      builder: [spec, builder, name]
                      builder_type: [spec, builder, kind]
                      build_count: [status, buildCounter]
                      stack: [status, latestStack]
                      latest_image: [status, latestImage]
              - name: image_status
                help: Image status from conditions
                each:
                  type: Info
                  info:
                    path: [status, conditions]
                    labelsFromPath:
                      type: ["type"]
                      status: ["status"] # Unknown
                      reason: ["reason"]
                      last_transition_time: ["lastTransitionTime"]
                    valueFrom: ["status"]
          - groupVersionKind:
              group: packaging.carvel.dev
              version: "*"
              kind: PackageRepository
            labelsFromPath:
              name: [metadata, name]
              namespace: [metadata, namespace]
            metricNamePrefix: carvel
            metrics:
              - name: packagerepository_info
                help: PackageRepository info on status and fetch target
                each:
                  type: Info
                  info:
                    labelsFromPath:
                      type: [status, conditions, "0", type]
                      status: [status, conditions, "0", status]
                      oci_image: [spec, fetch, imgpkgBundle, image]
                      git_url: [spec, fetch, git, url]
                      git_ref: [spec, fetch, git, ref]
          - groupVersionKind:
              group: packaging.carvel.dev
              version: "*"
              kind: PackageInstall
            labelsFromPath:
              name: [metadata, name]
              namespace: [metadata, namespace]
            metricNamePrefix: carvel
            metrics:
              - name: packageinstall_info
                help: PackageInstall info on status and fetch target
                each:
                  type: Info
                  info:
                    labelsFromPath:
                      type: [status, conditions, "0", type]
                      status: [status, conditions, "0", status]
                      package_name: [spec, packageRef, refName]
                      package_version: [status, version]
                      ytt_overlay_secret: [metadata, annotations, ext.packaging.carvel.dev/ytt-paths-from-secret-name.0]
          - groupVersionKind:
              group: kappctrl.k14s.io
              version: "*"
              kind: App
            labelsFromPath:
              name: [metadata, name]
              namespace: [metadata, namespace]
            metricNamePrefix: carvel
            metrics:
              - name: app_info
                help: App info on status and fetch target
                each:
                  type: Info
                  info:
                    labelsFromPath:
                      type: [status, conditions, "0", type]
                      status: [status, conditions, "0", status]
                      oci_image: [spec, fetch, "0", imgpkgBundle, image]
                      git_url: [spec, fetch, "0", git, url]
                      git_ref: [spec, fetch, "0", git, ref]
              - name: app_namespaces
                help: App namespaces
                each:
                  type: Info
                  info:
                    labelsFromPath:
                      namespaces_deployed_to: [status, deploy, kapp, associatedResources, namespaces]
