#@ load("@ytt:overlay", "overlay")
#@overlay/match by=overlay.all
---
#@overlay/match missing_ok=True
profile: build # Can take iterate, build, run, view.

#@overlay/match missing_ok=True
supply_chain: testing_scanning # Can take testing, testing_scanning.

#@overlay/match missing_ok=True
ootb_supply_chain_testing: # Optional if the corresponding shared keys are provided.
  registry:
    server: "BUILDSERVICE_REGISTRY_HOSTNAME"
    repository: "SUPPLYCHAIN_REPO"
  gitops:
    ssh_secret: "" # (Optional) Defaults to "".

#@overlay/match missing_ok=True
ootb_supply_chain_testing_scanning: # Optional if the corresponding shared keys are provided.
  registry:
    server: "BUILDSERVICE_REGISTRY_HOSTNAME"
    repository: "SUPPLYCHAIN_REPO"
    ## https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.3/tap/GUID-scc-gitops-vs-regops.html
  # gitops:
  #   ssh_secret: git-ssh
  #   server_address: https://github.com
  #   repository_owner: SUPPLYCHAIN_GITOPS_REPOSITORY_OWNER
  #   repository_name: tap-gitops-repo
  #   #branch: main
  #   commit_strategy: pull_request
  #   pull_request:
  #     server_kind: github
  #     commit_branch: ""
  #     pull_request_title: ready for review
  #     pull_request_body: generated by supply chain


## if grype is installed on DEVELOPER_NAMESPACE from tap-values.yml, 
## then expected behavior is that the developer namespace provisioner doesn't do anything regarding grype installation for developer namespace.
## https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.3/tap/GUID-cli-plugins-insight-cli-configuration.html
## https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.3/tap/GUID-scst-scan-upgrading.html
## https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.3/tap/GUID-scst-scan-install-scst-scan.html#install-grype
## https://docs.vmware.com/en/VMware-Tanzu-Application-Platform/1.3/tap/GUID-scst-store-multicluster-setup.html
#@overlay/match missing_ok=True
grype:
  namespace: "DEVELOPER_NAMESPACE"
  targetImagePullSecret: "registry-credentials"
  metadataStore:
    #url: https://metadata-store-app.metadata-store.svc.cluster.local:8443
    url: https://metadata-store.TAP_DOMAIN ## point to lb on view-cluster in DNS.
    caSecret:
      name: "store-ca-cert" # The name of the secret containing the ca.crt
      importFromNamespace: "metadata-store-secrets" # The namespace where Store is deployed (if single cluster) or where the connection secrets were created (if multi-cluster)
    authSecret:
      name: "store-auth-token" # The name of the secret containing the auth token to connect to Store
      importFromNamespace: "metadata-store-secrets" # The namespace where the connection secrets were created (if multi-cluster)
  ## additional custom CAs.
  # ca_cert_data: |
  #   -----BEGIN CERTIFICATE-----
  #   MIIDzTCCArWgAwIBAgIUNch6P5frstAn/3+sywH8wGaIo30wDQYJKoZIhvcNAQEL
  #   -----END CERTIFICATE-----

# #@overlay/match missing_ok=True
# package_overlays:

### commenting out this on TAP 1.5, because overlaying to scantemplate broke scan job validation webhook. 
### kubectl describe SourceScans tanzu-java-web-app -n demo-app => The scan job could not be created. admission webhook "validation.webhook.pipeline.tekton.dev" denied the request: validation failed: expected exactly one, got neither: 
# - name: "grype"
#   secrets:
#   - name: "scanning-ca-overlay"

# # https://github.com/x95castle1/custom-cartographer-supply-chain-examples/tree/main/github-pr
# ootb_templates:
#   excluded_templates:
#   - 'tekton-taskrun'

