
---
apiVersion: carto.run/v1alpha1
kind: ClusterImageTemplate
metadata:
  name: image-vulnerability-scan-prisma
spec:
  imagePath: .status.scannedImage
  retentionPolicy:
    maxFailedRuns: 2
    maxSuccessfulRuns: 2
  lifecycle: immutable

  healthRule:
    multiMatch:
      healthy:
        matchConditions:
          - status: "True"
            type: ScanCompleted
          - status: "True"
            type: Succeeded
      unhealthy:
        matchConditions:
          - status: "False"
            type: ScanCompleted
          - status: "False"
            type: Succeeded

  params:
    - name: image_scanning_workspace_size
      default: 4Gi
    - name: image_scanning_service_account_scanner
      default: scanner
    - name: image_scanning_service_account_publisher
      default: publisher
    - name: image_scanning_active_keychains
      default: []
    # - name: registry
    #   default:
    #     server: ghcr.io    # input your registry server
    #     repository: my-registry-repository    # input your registry repository
  ytt: |
    #@ load("@ytt:data", "data")

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def scanResultsLocation():
    #@   return "/".join([
    #@    data.values.params.registry.server,
    #@    data.values.params.registry.repository,
    #@    "-".join([
    #@      data.values.workload.metadata.name,
    #@      data.values.workload.metadata.namespace,
    #@      "scan-results",
    #@    ])
    #@   ]) + ":" + data.values.workload.metadata.uid
    #@ end

    #@ def param(key):
    #@   if not key in data.values.params:
    #@     return None
    #@   end
    #@   return data.values.params[key]
    #@ end

    #@ def maven_param(key):
    #@   if not key in data.values.params["maven"]:
    #@     return None
    #@   end
    #@   return data.values.params["maven"][key]
    #@ end

    #@ def correlationId():
    #@   if hasattr(data.values.workload, "annotations") and hasattr(data.values.workload.annotations, "apps.tanzu.vmware.com/correlationid"):
    #@     return data.values.workload.annotations["apps.tanzu.vmware.com/correlationid"]
    #@   end
    #@   if not hasattr(data.values.workload.spec, "source"):
    #@     return ""
    #@   end
    #@   url = ""
    #@   if hasattr(data.values.workload.spec.source, "git"):
    #@     url = data.values.workload.spec.source.git.url
    #@   end
    #@   if hasattr(data.values.workload.spec.source, "image"):
    #@     url = data.values.workload.spec.source.image.split("@")[0]
    #@   end
    #@   if param("maven"):
    #@     url = param("maven_repository_url") + "/" + maven_param("groupId").replace(".", "/") + "/" + maven_param("artifactId")
    #@   end
    #@   return url + "?sub_path=" + getattr(data.values.workload.spec.source, "subPath", "/")
    #@ end

    ---
    apiVersion: app-scanning.apps.tanzu.vmware.com/v1alpha1
    kind: ImageVulnerabilityScan
    metadata:
      labels: #@ merge_labels({ "app.kubernetes.io/component": "image-scan" })
      annotations:
        apps.tanzu.vmware.com/correlationid: #@ correlationId()
        app-scanning.apps.tanzu.vmware.com/scanner-name: Prisma
      generateName: #@ data.values.workload.metadata.name + "-prisma-scan-"
    spec:
      image: #@ data.values.image
      activeKeychains: #@ data.values.params.image_scanning_active_keychains
      scanResults:
        location: #@ scanResultsLocation()
      workspace:
        size: #@ data.values.params.image_scanning_workspace_size
      serviceAccountNames:
        publisher: #@ data.values.params.image_scanning_service_account_publisher
        scanner: #@ data.values.params.image_scanning_service_account_scanner
        env:
        - name: IMAGE
          value: $(params.image)
      steps:
      - name: prisma
        image: PRISMA-SCANNER-IMAGE            ### TODO update here
        imagePullPolicy: IfNotPresent
        workingDir: /workspace
        securityContext:
          privileged: true
          allowPrivilegeEscalation: true
          seccompProfile:
            type: RuntimeDefault
          capabilities:
            drop:
              - ALL
        script: |
          #!/bin/bash
          set -x
          curl --output ./twistcli --write-out "%{http_code}" -s -L -k -u $USER_NAME:$PASSWORD $ADDRESS/api/v1/util/twistcli
          chmod +x /workspace/twistcli

          if [[ ! -e /cred-helper/config.json ]]; then
            echo "{}" > /cred-helper/config.json
          fi

          podman pull $IMAGE --tls-verify=false  --storage-opt ignore_chown_errors=true 
          ## to verify.
          podman images

          twistoutput=./twist-scan.json

          ./twistcli images scan --podman-path /usr/bin/podman --address $ADDRESS --user $USER_NAME --password $PASSWORD $IMAGE --output-file $twistoutput --containerized

          # Input commands used for your Prisma summary report conversion. See below for more detail.
          twistversion=$(./twistcli -v | sed "s/twistcli version //")
          IMAGE_NAME=$(echo $IMAGE | cut -d'@' -f1)
          IMAGE_DIGEST=$(echo $IMAGE | cut -d'@' -f2)
          /prismaconverter image $twistversion $twistoutput "./" "./scan-results/scan.cdx.xml" $IMAGE_NAME $IMAGE_DIGEST
          cp $twistoutput scan-results/
          ls -al scan-results/
          
          curl --output ./cyclonedx -L  https://github.com/CycloneDX/cyclonedx-cli/releases/download/v0.25.0/cyclonedx-linux-x64
          chmod +x ./cyclonedx
          export DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=1
          ./cyclonedx validate --input-file ./scan-results/scan.cdx.xml --input-format xml --input-version v1_4 --fail-on-errors
          ## output message should be "BOM validated successfully."
        env:
        - name: USER_NAME
          valueFrom:
            secretKeyRef:
              key: username
              name: prisma-auth
              optional: false
        - name: PASSWORD
          valueFrom:
            secretKeyRef:
              key: password
              name: prisma-auth
              optional: false
        - name: ADDRESS
          valueFrom:
            secretKeyRef:
              key: address
              name: prisma-auth
              optional: false
        - name: IMAGE
          value: $(params.image)
