apiVersion: carto.run/v1alpha1
kind: ClusterSourceTemplate
metadata:
  labels:
    apps.tanzu.vmware.com/use-sonarqube: "true" # for sonarqube workload
  annotations:
  name: sonarqube-template
spec:
  revisionPath: .status.outputs.revision
  urlPath: .status.outputs.url

  healthRule:
    singleConditionType: Ready

  params:
    - name: sonar_host_url
      default: ""
    - name: sonar_password
      default: ""
    - name: wait_on_sonar_analysis
      default: ""
    # - name: testing_pipeline_matching_labels  ## (!) no need
    #   default: 
    #     apps.tanzu.vmware.com/pipeline: test

  ytt: |
    #@ load("@ytt:data", "data")

    #@ def merge_labels(fixed_values):
    #@   labels = {}
    #@   if hasattr(data.values.workload.metadata, "labels"):
    #@     labels.update(data.values.workload.metadata.labels)
    #@   end
    #@   labels.update(fixed_values)
    #@   return labels
    #@ end

    #@ def sonar_project_key():
    #@   return "-".join([
    #@    data.values.workload.metadata.namespace,
    #@    data.values.workload.metadata.name,
    #@   ])
    #@ end

    #@ def merged_tekton_params():
    #@   params = []
    #@   if hasattr(data.values, "params") and hasattr(data.values.params, "testing_pipeline_params"):
    #@     for param in data.values.params["testing_pipeline_params"]:
    #@       params.append({ "name": param, "value": data.values.params["testing_pipeline_params"][param] })
    #@     end
    #@   end
    #@   params.append({ "name": "source-url", "value": data.values.source.url })
    #@   params.append({ "name": "source-revision", "value": data.values.source.revision })
    #@   params.append({ "name": "SONAR_PROJECT_KEY", "value": sonar_project_key() })
    #@   params.append({ "name": "wait-on-sonar-analysis", "value": data.values.params.wait_on_sonar_analysis })
    #@   params.append({ "name": "SONAR_HOST_URL", "value": data.values.params.sonar_host_url })  
    #@   params.append({ "name": "SONAR_PASSWORD", "value": data.values.params.sonar_password })    
    #@   return params
    #@ end

    apiVersion: carto.run/v1alpha1
    kind: Runnable
    metadata:
      name: #@ data.values.workload.metadata.name + "-sonar-code-analysis"
      labels: #@ merge_labels({ "app.kubernetes.io/component": "test" })
    spec:
      #@ if hasattr(data.values.workload.spec, "serviceAccountName"):
      serviceAccountName: #@ data.values.workload.spec.serviceAccountName
      #@ else:
      serviceAccountName: default
      #@ end

      runTemplateRef:
        name: tekton-sonarqube-taskrun
        kind: ClusterRunTemplate

      selector:
        resource:
          apiVersion: tekton.dev/v1beta1
          kind: Task

        #! comment out this for language neutral.
        #! #@ not hasattr(data.values, "testing_pipeline_matching_labels") or fail("testing_pipeline_matching_labels param is required")
        #! matchingLabels: #@ data.values.params["testing_pipeline_matching_labels"] or fail("testing_pipeline_matching_labels param cannot be empty")
        matchingLabels:
          apps.tanzu.vmware.com/use-sonarqube: "true"
          
      inputs:
        #@ if hasattr(data.values.workload.spec, "serviceAccountName"):
        serviceAccountName: #@ data.values.workload.spec.serviceAccountName
        #@ else:
        serviceAccountName: default
        #@ end

        tekton-params: #@ merged_tekton_params()