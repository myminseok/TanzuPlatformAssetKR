#
# ref: https://hub.tekton.dev/tekton/task/sonarqube-scanner
# This file has been modified to include the SONAR_LOGIN parameter.
#
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: sonarqube-scanner-task
  labels:
    app.kubernetes.io/version: "0.2"
    apps.tanzu.vmware.com/use-sonarqube: "true"  # (!) required
    # apps.tanzu.vmware.com/pipeline: test  # (!) no need
    # apps.tanzu.vmware.com/language: java  # (!) no need
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Security
    tekton.dev/tags: security
    tekton.dev/displayName: "sonarqube scanner"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    The following task can be used to perform static analysis on the source code
    provided the SonarQube server is hosted
    SonarQube is the leading tool for continuously inspecting the Code Quality and Security
    of your codebases, all while empowering development teams. Analyze over 25 popular
    programming languages including C#, VB.Net, JavaScript, TypeScript and C++. It detects
    bugs, vulnerabilities and code smells across project branches and pull requests.
  params:
    - name: SONAR_HOST_URL
      description: Host URL where the sonarqube server is running
      default: "http://192.168.0.27:9000"
    - name: SONAR_PROJECT_KEY
      description: Project's unique key
      default: "test"
    - name: PROJECT_VERSION
      description: "Version of the project. Default: 1.0"
      default: "1.0"
    - name: SONAR_LOGIN
      description: Auth for the project
      default: "admin"
    - name: SONAR_LOGIN_KEY
      description: Name of the file of the login within the sonarqube credentials workspace
      default: "login"
    - name: SONAR_PASSWORD
      description: Auth for the project
      default: "pass"
    - name: source-url
      description: Location of the source code
    - name: source-revision
      description: Revision of the source code
    - name: tokenSecretName
      default: "sonarqube-credentials"

  workspaces:
    - name: tmp-workspace

  steps:
    # - name: compile                                ## (!) no need this step.
    #   image: gradle:latest
    #   workingDir: $(workspaces.tmp-workspace.path)
    #   script: |
    #     #!/usr/bin/env bash
    #     set -ex
    #     wget -qO- $(params.source-url) | tar xvz
    #     #./mvnw compile -Dmaven.repo.local=$(workspaces.tmp-workspace.path) -s $(workspaces.tmp-workspace.path)/settings.xml
    #     #./mvnw compile

    - name: sonar-properties-create
      image: gradle:latest
      workingDir: $(workspaces.tmp-workspace.path)
      env:
      - name: SONAR_HOST_URL  ## add this
        valueFrom:
          secretKeyRef:
            name: $(params.tokenSecretName)
            key: sonar_host_url
      - name: SONAR_PASSWORD  ## add this
        valueFrom:
          secretKeyRef:
            name: $(params.tokenSecretName)
            key: sonar_password
      - name: SONAR_LOGIN  ## add this
        valueFrom:
          secretKeyRef:
            name: $(params.tokenSecretName)
            key: sonar_login
      - name: SONAR_TOKEN  ## add this
        valueFrom:
          secretKeyRef:
            name: $(params.tokenSecretName)
            key: sonar_token
      - name: SONAR_CA_CRT  ## add this
        valueFrom:
          secretKeyRef:
            name: $(params.tokenSecretName)
            key: sonar_ca_crt
      script: |
        #!/bin/bash
        
        replaceValues() {
          filename=$1
          thekey=$2
          newvalue=$3
          if ! grep -R "^[#]*\s*${thekey}=.*" $filename >/dev/null; then
            echo "APPENDING because '${thekey}' not found"
            echo "" >>$filename
            echo "$thekey=$newvalue" >>$filename
          else
            echo "SETTING because '${thekey}' found already"
            sed -ir "s|^[#]*\s*${thekey}=.*|$thekey=$newvalue|" $filename
          fi
        }

        # If we were given a properties file, then use that.
        if [[ -f $(workspaces.tmp-workspace.path)/sonar-project.properties ]]; then
          echo "using user provided sonar-project.properties file"
          cp -RL $(workspaces.tmp-workspace.path)/sonar-project.properties $(workspaces.tmp-workspace.path)/sonar-project.properties
        fi
        if [[ -f $(workspaces.tmp-workspace.path)/sonar-project.properties ]]; then

          # Allow overrides from parameters passed in from the supply chain.
          if [[ -n "$(params.SONAR_HOST_URL)" ]]; then
            replaceValues $(workspaces.tmp-workspace.path)/sonar-project.properties sonar.host.url $(params.SONAR_HOST_URL)
          fi
          if [[ -n "$(params.SONAR_PROJECT_KEY)" ]]; then
            replaceValues $(workspaces.tmp-workspace.path)/sonar-project.properties sonar.projectKey $(params.SONAR_PROJECT_KEY)
          fi
        else
          touch sonar-project.properties
          echo "sonar.projectKey=$(params.SONAR_PROJECT_KEY)" >> sonar-project.properties
          
          ## TODO modified
          if [ "$SONAR_HOST_URL" != "" ]; then  
            echo "sonar.host.url=$SONAR_HOST_URL" >> sonar-project.properties
          else
            echo "sonar.host.url=$(params.SONAR_HOST_URL)" >> sonar-project.properties
          fi
          if [ "$SONAR_LOGIN" != "" ]; then  
            echo "sonar.login=$SONAR_LOGIN" >> sonar-project.properties
          else
            echo "sonar.login=$(params.SONAR_LOGIN)" >> sonar-project.properties
          fi

          if [ "$SONAR_PASSWORD" != "" ]; then  
            echo "sonar.password=$SONAR_PASSWORD" >> sonar-project.properties
          else
            echo "sonar.password=$(params.SONAR_PASSWORD)" >> sonar-project.properties
          fi
          echo "sonar.sources=." >> sonar-project.properties
          echo "sonar.exclusions=**/*.java" >>  sonar-project.properties
        fi

        echo "# $(workspaces.tmp-workspace.path)/sonar-project.properties ---------------------------"
        cat $(workspaces.tmp-workspace.path)/sonar-project.properties 

        if [ "$SONAR_CA_CRT" != "" ]; then  
          echo "# SONAR_CA_CRT env detected ---------------------------"
          echo "$SONAR_CA_CRT" > $(workspaces.tmp-workspace.path)/sonar_ca.crt
          cat $(workspaces.tmp-workspace.path)/sonar_ca.crt
        fi

    - name: sonar-scan
      image: docker.io/sonarsource/sonar-scanner-cli:4.6@sha256:7a976330a8bad1beca6584c1c118e946e7a25fdc5b664d5c0a869a6577d81b4f
      workingDir: $(workspaces.tmp-workspace.path)
      # command:
      #   - sonar-scanner
      script: |
        #!/bin/bash
        set -ex
        ## (!) requires to download source code 
        wget -qO- $(params.source-url) | tar xvz

        echo "# importing sonarqube server CA to truststore ---------------------------"
        cat $(workspaces.tmp-workspace.path)/sonar_ca.crt
        echo "JAVA_HOME:$JAVA_HOME" ## JAVA_HOME:/usr/lib/jvm/java-11-openjdk
        keytool -importcert -trustcacerts -cacerts -file $(workspaces.tmp-workspace.path)/sonar_ca.crt -alias myCert -storepass changeit  -noprompt 
        sonar-scanner

        